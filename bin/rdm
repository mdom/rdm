#!/bin/sh

die() {
    printf "%s: %s\n" "${0##*/}" "$1" >&2
    exit "${2:-1}"
}

main() {

    trap cleanup EXIT INT

    formatter="pandoc -f textile -t plain"

    # shellcheck disable=SC1090
    [ -f ~/.rdmrc ] && . ~/.rdmrc

    base_url="${RDM_BASE_URL:-$base_url}"
    project="${RDM_PROJECT:-$project}"
    key="${RDM_APIKEY:-$key}"
    pager="${RDM_PAGER:-${pager:-${PAGER:-less -F --no-init}}}"

    while [ -n "$1" ]; do
        case $1 in
            --project)
                 project=$2
                 shift 2
                 ;;
            --base-url)
                 base_url=$2
                 shift 2
                 ;;
            --api-key)
                 key=$2
                 shift 2
                 ;;
             --help)
                printf "%s\n" "Usage: ${0##*/} CMD [PAGE] [FILES...]"
                exit 0
                ;;
            --*) die "Unknown parameter '$1'" ;;
            *) break ;;
        esac
    done

    [ -z "$key" ]      && die "Required parameter --api-key missing"
    [ -z "$project" ]  && die "Required parameter --project missing"
    [ -z "$base_url" ] && die "Required parameter --base-url missing"

    tmpfile="$(mktemp -t "${0##*/}_XXXXXXXXX")"

    if [ -z "$1" ]; then
        die "Usage: ${0##*/} CMD [PAGE] [FILES...]"
    fi

    cmd=$1
    shift

    case $cmd in
           list) list_pages "$@" ;;
           edit) edit_page "$@" ;;
           view) view_page "$@" ;;
           open) open_page "$@" ;;
           yank) yank_page "$@" ;;
            cat) formatter="cat" pager="cat" view_page "$@" ;;
        replace) replace_page "$@" ;;
         append) append_page "$@" ;;
        prepend) prepend_page "$@" ;;
         attach) attach "$@" ;;
         search) search "$@" ;;
         delete) delete_page "$@" ;;
           diff) diff_page "$@" ;;
              *) die "Unknown subcommand '$cmd'" ;;
    esac
}

cleanup() {
    ret=$?
    rm -f "$tmpfile"
    exit "$ret"
}

api()  {
    _api "$@" --fail
}

api_unsafe()  {
    _api "$@"
}

_api() {
    url="$base_url/projects/$project/wiki/$1.json?key=$key"
    shift
    curl --silent --header 'Content-Type: application/json' "$@" "$url" \
        || die "curl returned with exit code $?"
}

list_pages() {
    api "index" | jq -r '.wiki_pages|.[]|.title'
}

select_page() {
    if [ -n "$1" ]; then
        echo "$1"
        return
    fi
    title="$("$0" list | fzf --print-query | tail -1)"
    if [ -z "$title" ]; then
        die "No page selected"
    fi
    echo "$title"
}

open_page() {
    title="$(select_page "$1")"
    xdg-open "$base_url/projects/$project/wiki/$title"
}

yank_page() {
    title="$(select_page "$1")"
    echo "$base_url/projects/$project/wiki/$title" | xclip
}

view_page() {
    title="$(select_page "$1")"
    api "$title" | jq -r '.wiki_page|.text' | ${formatter} | ${pager}
}

replace_page() {
    title="$1"
    jq -Rs '{ wiki_page: {text: . }}' | api "$title" -X PUT --data @-
}

append_page() {
    title="$1"
    {
        api_unsafe "$title" | jq -r '.wiki_page|.text' | tr -d '\r'
        cat
    } | jq -Rs '{ wiki_page: {text: . }}' | api "$title" -X PUT --data @-
}

prepend_page() {
    title="$1"
    {
        cat
        api_unsafe "$title" | jq -r '.wiki_page|.text' | tr -d '\r'
    } | jq -Rs '{ wiki_page: {text: . }}' | api "$title" -X PUT --data @-
}

edit_page() {
    title="$(select_page "$1")"
    api_unsafe "$title" | jq -r '.wiki_page|.text' | tr -d '\r' >"$tmpfile"
    old_text="$(cat "$tmpfile")"

    while true; do
        ${EDITOR:-vi} "$tmpfile" || return
        [ -s "$tmpfile" ]        || return

        new_text="$(cat "$tmpfile")"
        [ "$old_text" != "$new_text" ] || return

        while true; do
            save_page_menu

            case $_ret in
                y) break 2 ;;
                n) return ;;
                d) echo "$old_text" | diff -u - "$tmpfile" ;;
                v) ${formatter} "$tmpfile" | ${pager} ;;
                e) continue 2 ;;
            esac
        done
    done

    jq -n --arg text "$new_text" '{ wiki_page: {text: $text }}' \
        | api "$1" -X PUT --data @-
}

upload() {
    url="$base_url/uploads.json?key=$key"
    for file; do
        curl -X POST --data "@$file" --silent --header 'Content-Type: application/octet-stream' "$url" \
            | jq --arg file "${file##*/}" -r '.upload | .token + " " + $file'
    done
}

attach() {
    title="$1"
    shift
    text="$(api "$title" | jq -r '.wiki_page|.text' | tr -d '\r')"
    upload "$@" | jq -Rn --arg text "$text" \
        '{ wiki_page: { 
            text: $text,
            uploads: [
                inputs | split(" ") | {token: .[0], filename: .[1]}
            ]
        }}' \
        | api "$title" -X PUT --data @-
}

save_page_menu() {
    while true; do
        printf "%s" "Save page [y,n,e,d,v,?]? "
        read -r _ret
        case $_ret in
            y | n | e | d | v)
                return
                ;;
            ?)
                printf "%s - %s\n" \
                    "y" "save page" \
                    "n" "discard changes" \
                    "e" "edit page" \
                    "d" "diff page" \
                    "v" "view formatted page" \
                    "?" "show help"
                ;;
        esac
    done
}

search() {
    url="$base_url/search.json?limit=100&q=$*&wiki_pages=1&key=$key"
    url="$(echo "$url" | sed 's/ /%20/g')"

    offset=0
    while [ -z "$total" ] || [ "$((offset))"   -lt "$total" ]; do
        curl --url-query "offset=$offset" --silent --show-error --fail "$url" \
            >"$tmpfile" \
            || die "curl returned with exit code $?"

        if [ -z "$total" ]; then
            total="$( jq '.total_count' "$tmpfile")"
        fi

        jq -r '.results|.[]|.title' "$tmpfile" | sed 's/^Wiki: //'
        offset="$((offset + 100))"
    done
}

delete_page() {
    title="$(select_page "$1")"
    while true; do
        printf "%s" "Delete page '$title' [y,n,?]? "
        read -r ret
        case $ret in
            y)
                api "$title" -X DELETE
                break
                ;;
            n)
                break
                ;;
            ?)
                printf "%s - %s\n" \
                    "y" "delete page" \
                    "n" "keep page" \
                    "?" "show help"
                ;;
        esac
    done
}

page_content() {
    api "$1" | jq -r '.wiki_page|.text' | tr -d '\r'
}

diff_no_header() {
    diff -u "$@" | sed 1,3d
}

diff_page() {
    title="$(select_page "$1")"
    if [ -n "$2" ] && [ -n "$3" ]; then
        page_content "$title/$2" >"$tmpfile"
        page_content "$title/$3" | diff_no_header "$tmpfile" -
    elif [ -n "$2" ]; then
        page_content "$title/$2" >"$tmpfile"
        page_content "$title" | diff_no_header "$tmpfile" -
    else
        cur_version=$(api "$title" | jq -r '.wiki_page|.version')
        old_version=$((cur_version - 1))
        page_content "$title/$old_version" >"$tmpfile"
        page_content "$title/$cur_version" | diff_no_header "$tmpfile" -
    fi
}

main "$@"
