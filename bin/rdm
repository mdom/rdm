#!/bin/sh

die() {
    printf "%s: %s\n" "${0##*/}" "$1" >&2
    exit "${2:-1}"
}

read_config() {
    for i; do
        if [ -f "$i" ]; then
            # shellcheck disable=SC1090
            . "$i"
            return
        fi
    done
}

main() {

    trap cleanup EXIT INT

    formatter="pandoc -f textile -t plain --columns $(tput cols) "
    editor="${EDITOR:-vi}"

    read_config "${XDG_CONFIG_HOME:-${HOME}/.config}/rdm/rdmrc}" ~/.rdmrc

    base_url="${RDM_BASE_URL:-$base_url}"
    project="${RDM_PROJECT:-$project}"
    key="${RDM_APIKEY:-$key}"
    pager="${RDM_PAGER:-${pager:-less -F --no-init}}"

    if [ -z "$key" ]; then
        if [ -z "$user" ]; then
            die "Missing apikey, user must be set."
        fi
        if [ -z "$password" ] && [ -z "$pass_cmd" ]; then
            die "Either password or pass_cmd must be set."
        fi
        if [ -n "$pass_cmd" ]; then
            password="$($pass_cmd)"
        fi
    fi

    while [ -n "$1" ]; do
        case $1 in
            --project)
                 project=$2
                 shift 2
                 ;;
            --base-url)
                 base_url=$2
                 shift 2
                 ;;
            --api-key)
                 key=$2
                 shift 2
                 ;;
             --help)
                printf "%s\n" "Usage: ${0##*/} CMD [PAGE] [FILES...]"
                exit 0
                ;;
            --*) die "Unknown parameter '$1'" ;;
            *) break ;;
        esac
    done

    [ -z "$key" ]      && die "Required parameter --api-key missing"
    [ -z "$project" ]  && die "Required parameter --project missing"
    [ -z "$base_url" ] && die "Required parameter --base-url missing"

    tmpfile="$(mktemp -t "${0##*/}_XXXXXXXXX")"

    cmd=$1
    if [ -n "$cmd" ]; then
        shift
    fi

    case $cmd in
           list) search -t "$@" ;;
           edit) edit_page "$@" ;;
           view) view_page "$@" ;;
           open) open_page "$@" ;;
           yank) yank_page "$@" ;;
            cat) formatter="cat" pager="cat" view_page "$@" ;;
        replace) replace_page "$@" ;;
         append) append_page "$@" ;;
        prepend) prepend_page "$@" ;;
         attach) attach "$@" ;;
         search) search "$@" ;;
         delete) delete_page "$@" ;;
           diff) diff_page "$@" ;;
         rename) rename_page "$@" ;;
        edit-reload) edit_reload "$@" ;;
             "") ui "$@" ;;
              *) die "Unknown subcommand '$cmd'" ;;
    esac
}

cleanup() {
    ret=$?
    rm -f "$tmpfile"
    exit "$ret"
}

api()  {
    _api "$@" --fail
}

api_unsafe()  {
    _api "$@"
}

_api() {
    url="$base_url/projects/$project/wiki/$1.json"
    shift
    my_curl --header 'Content-Type: application/json' "$@" "$url" \
        || die "curl returned with exit code $?"
}

select_page() {
    case "$1" in
        b:*) title="$(search    "${1#b:}" | fzf --print-query | tail -1)" ;;
        t:*) title="$(search -t "${1#t:}" | fzf --print-query | tail -1)" ;;
         "") title="$(search              | fzf --print-query | tail -1)" ;;
          *) title="$1" ;;
    esac
    if [ -z "$title" ]; then
        die "No page selected"
    fi
}

ui() {
    RDM_PAGER="less"
    RDM_PROJECT="$project"
    RDM_BASE_URL="$base_url"
    RDM_API_KEY="$key"

    export RDM_PAGER
    export RDM_PROJECT
    export RDM_BASE_URL
    export RDM_API_KEY

    search | fzf \
        --border=rounded \
        --tac \
        --border-label " Redmine $base_url $project " \
        --no-scrollbar \
        --preview-window border-left \
        --exact \
        --header-first \
        --header "^e edit ^v view ^o open ^y yank ^s search ^d diff ^c quit" \
        --preview "$0 view {}" \
        --bind "ctrl-e:execute($0 edit {})+refresh-preview" \
        --bind "ctrl-o:execute($0 open {})" \
        --bind "ctrl-y:execute($0 yank {})" \
        --bind "ctrl-d:execute($0 diff {})" \
        --bind "ctrl-v:execute($0 view {})+refresh-preview" \
        --bind "ctrl-s:reload($0 search {q})+clear-query" \
        --bind "enter:execute($0 view {})+refresh-preview"
}

open_page() {
    select_page "$1"
    xdg-open "$base_url/projects/$project/wiki/$title"
}

yank_page() {
    select_page "$1"
    echo "$base_url/projects/$project/wiki/$title" | xclip
}

edit_reload() {
    $0 edit "${TITLE?}"
    $0 view "${TITLE?}" >"${TMPFILE?}"
}

view_page() {
    select_page "$1"
    api "$title" | jq -r '.wiki_page|.text' | ${formatter} >"$tmpfile"
    TITLE="$title" TMPFILE="$tmpfile" EDITOR="$0 edit-reload" ${pager} "$tmpfile"
}

replace_page() {
    title="$1"
    jq -Rs '{ wiki_page: {text: . }}' | api "$title" -X PUT --data @-
}

append_page() {
    title="$1"
    {
        api_unsafe "$title" | jq -r '.wiki_page|.text' | tr -d '\r'
        cat
    } | jq -Rs '{ wiki_page: {text: . }}' | api "$title" -X PUT --data @-
}

prepend_page() {
    title="$1"
    {
        cat
        api_unsafe "$title" | jq -r '.wiki_page|.text' | tr -d '\r'
    } | jq -Rs '{ wiki_page: {text: . }}' | api "$title" -X PUT --data @-
}

edit_page() {
    select_page "$1"
    api_unsafe "$title" | jq -r '.wiki_page|.text' | tr -d '\r' >"$tmpfile"
    old_text="$(cat "$tmpfile")"

    while true; do
        # shellcheck disable=SC2086
        eval ${editor} "$tmpfile" || return
        [ -s "$tmpfile" ]        || return

        new_text="$(cat "$tmpfile")"
        [ "$old_text" != "$new_text" ] || return

        while true; do
            save_page_menu

            case $_ret in
                y) break 2 ;;
                n) return ;;
                d) echo "$old_text" | diff -u - "$tmpfile" ;;
                v) ${formatter} "$tmpfile" | ${pager} ;;
                e) continue 2 ;;
            esac
        done
    done

    jq -n --arg text "$new_text" '{ wiki_page: {text: $text }}' \
        | api "$title" -X PUT --data @-
}

my_curl() {
    curl --url-query "key=$key" --silent ${user:+--user "$user:$password"} "$@"
}

upload() {
    for file; do
        my_curl \
            --request POST \
            --data "@$file" \
            --header 'Content-Type: application/octet-stream' \
            "$base_url/uploads.json" \
            | jq --arg file "${file##*/}" -r '.upload | .token + " " + $file'
    done
}

attach() {
    title="$1"
    shift
    text="$(api "$title" | jq -r '.wiki_page|.text' | tr -d '\r')"
    upload "$@" | jq -Rn --arg text "$text" \
        '{ wiki_page: { 
            text: $text,
            uploads: [
                inputs | split(" ") | {token: .[0], filename: .[1]}
            ]
        }}' \
        | api "$title" -X PUT --data @-
}

save_page_menu() {
    while true; do
        printf "%s" "Save page [y,n,e,d,v,?]? "
        read -r _ret
        case $_ret in
            y | n | e | d | v)
                return
                ;;
            ?)
                printf "%s - %s\n" \
                    "y" "save page" \
                    "n" "discard changes" \
                    "e" "edit page" \
                    "d" "diff page" \
                    "v" "view formatted page" \
                    "?" "show help"
                ;;
        esac
    done
}

search() {
    case $1 in
        -t)
            search_titles=1
            shift
            ;;
        -b)
            search_titles=""
            shift
            ;;
    esac
    if [ -z "$1" ]; then
        api "index" | jq -r '.wiki_pages|.[]|.title'
    fi
    url="$base_url/projects/$project/search.json?q=$*&wiki_pages=1"
    url="$(echo "$url" | sed 's/ /%20/g')"

    offset=0
    while [ -z "$total" ] || [ "$((offset))"   -lt "$total" ]; do
        my_curl \
            ${search_titles:+--url-query "titles_only=1"} \
            --url-query "offset=$offset" \
            --url-query "limit=100" \
            --show-error \
            --fail \
            "$url" >"$tmpfile" \
            || die "curl returned with exit code $?"

        if [ -z "$total" ]; then
            total="$( jq '.total_count' "$tmpfile")"
        fi

        jq -r '.results|.[]|.title' "$tmpfile" | sed 's/^Wiki: //'
        offset="$((offset + 100))"
    done
}

delete_page() {
    select_page "$1"
    while true; do
        printf "%s" "Delete page '$title' [y,n,?]? "
        read -r ret
        case $ret in
            y)
                api "$title" -X DELETE
                break
                ;;
            n)
                break
                ;;
            ?)
                printf "%s - %s\n" \
                    "y" "delete page" \
                    "n" "keep page" \
                    "?" "show help"
                ;;
        esac
    done
}

page_content() {
    api "$1" | jq -r '.wiki_page|.text' | tr -d '\r'
}

diff_page() {
    select_page "$1"
    older_version="${2--1}"
    newer_version="${3-$(api "$title" | jq -r '.wiki_page|.version')}"

    case $older_version in
        -*)  older_version=$((newer_version - ${older_version#-}))  ;;
    esac

    page_content "$title/$older_version" >"$tmpfile"
    page_content "$title/$newer_version" \
        | diff -u "$tmpfile" - \
        | sed 1,3d \
        | ${pager}
}

rename_page() {
    select_page "$1"
    xdg-open "$base_url/projects/$project/wiki/$title/rename"
}

main "$@"
